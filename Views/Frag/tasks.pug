
.cont-pagina
    .cont-task
        h1.tl-task-ad Administration
        - const userTasksOwner = Task.filter(task => task.taskOwnerUserID === userID);
        - if (userTasksOwner.length === 0)
            .card
                h1.title-task YEAY
                p.fech-ent No tasks created!
        - else 
                each dtTask in userTasksOwner
                    .card
                        h1.title-task= dtTask.titleTask
                        - const date = new Date(dtTask.deadLineTask);
                        p.fech-ent= date.toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' })
                        a.btn-tasks(value=`${dtTask.taskID}, 1`) Show more

                        - var stateTaskTEX = '';
                        if dtTask.stateOfTask === 1
                            - stateTaskTEX = 'To do';
                        else if dtTask.stateOfTask === 2
                            - stateTaskTEX = 'Doing';
                        else if dtTask.stateOfTask === 3
                            - stateTaskTEX = 'Done';
                        else if dtTask.stateOfTask === 6
                            - stateTaskTEX = 'Cancelled';

                        p.fech-ent(class=taskStateClass)= "Status: " + stateTaskTEX

    .cont-task
        h1.tl-task To do
        - if (tasksToDo.length === 0)
            .card
                h1.title-task YEAY
                p.fech-ent No tasks!
        - else
            each dtTask in tasksToDo
                .card
                    h1.title-task= dtTask.titleTask
                    - const date = new Date(dtTask.deadLineTask);
                    p.fech-ent= date.toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' })
                    a.btn-tasks(value=`${dtTask.taskID}, 2`) Show more

    .cont-task
        h1.tl-task Doing 
        - if (tasksDoing.length === 0)
            .card
                h1.title-task YEAY
                p.fech-ent No tasks!
        - else
            each dtTask in tasksDoing
                .card
                    h1.title-task= dtTask.titleTask
                    - const date = new Date(dtTask.deadLineTask);
                    p.fech-ent= date.toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' })
                    a.btn-tasks(value=`${dtTask.taskID}, 3`) Show more

    .cont-task
        h1.tl-task Done 
        - if (tasksDone.length === 0)
            .card
                h1.title-task YEAY
                p.fech-ent No tasks!
        - else
            each dtTask in tasksDone
                .card
                    h1.title-task= dtTask.titleTask
                    - const date = new Date(dtTask.deadLineTask);
                    p.fech-ent= date.toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' })
                    a.btn-tasks(value=`${dtTask.taskID}, 4`) Show more 

script.
    // cuando se esta cargando el contenido se ejecutarÃ¡ este
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('h1.title-task').forEach(element => {
            // Le damos por cada elemento la comprobacion 
            element.textContent = truncateTitle(element.textContent, 30);
        });
        // Obtenemos los elementos que coincidan con este medio, devuelve un arreglo con los elementos con un index
        // Iteramos en cada uno y le asignamos el evento del click
        document.querySelectorAll('.btn-tasks').forEach(button => {
            button.addEventListener('click', async () => {
                var id = button.getAttribute('value');// Obtenemos el valor del value

                // Dividir la cadena en dos pedazos
                const valuesID = id.split(', ');

                // Para cuando esta en administrador
                if(parseInt(valuesID[1])=== 1){
                    try {
                        const response = await fetch(`/g-d-model/${valuesID[0]}`);
                        const data = await response.json();
                        setDataForModalForEdit(data);
                    } catch (error) {
                        console.error('Error al obtener los datos: ', error);
                    }
                }

                // Para cuando esta en to do
                if(parseInt(valuesID[1])=== 2){
                    try {
                        const response = await fetch(`/g-d-model/${valuesID[0]}`);
                        const data = await response.json();
                        setDataForModalForUserAsigment(data);
                    } catch (error) {
                        console.error('Error al obtener los datos: ', error);
                    }
                }

                if(parseInt(valuesID[1])=== 3){
                    try {
                        const response = await fetch(`/g-d-model/${valuesID[0]}`);
                        const data = await response.json();
                        setDataForModalForUserAsigmentDoin(data);
                    } catch (error) {
                        console.error('Error al obtener los datos: ', error);
                    }
                }

                // Para cuando esta en to done
                if(parseInt(valuesID[1]) === 4){
                    try {
                        const response = await fetch(`/g-d-model/${valuesID[0]}`);
                        const data = await response.json();
                        setDataForModalDone(data);
                    } catch (error) {
                        console.error('Error al obtener los datos: ', error);
                    }
                }

                //- try {
                //-     const response = await fetch(`/g-d-model/${id}`);
                //-     const data = await response.json();
                //-     setDataForModal(data);
                //- } catch (error) {
                //-     console.error('Error al obtener los datos: ', error);
                //- }
            });
        });
    });

    // Funcion que agrega puntos si el texto es muy grande 
    function truncateTitle(title, maxLength) {
        // Si el titulo es mayor a este parametro
        if (title.length > maxLength) {
            // Toma la porcion del texto desde el inicio hasta 3 letras antes del valor especificado 
            return title.slice(0, maxLength - 3) + '...';
        }
        return title;
    }

    function setDataForModalForEdit(data){
        // Comprobamos que podamos editarlo, para ello, comparamos
        if(data.dataForModal.stateOfTask === 3 || data.dataForModal.stateOfTask === 6){
            setDataForModalDone(data);
        }else{
            const modal = document.getElementById("Modal-bkg-edit");
                    modal.classList.add('show');
                    modal.classList.remove('hide');
                    modal.style.display = 'block';

                    const dataForModal = data.dataForModal;
                    const dataUsers = data.dataUsers;
                    const dataOr = data.usersOrden; // Este puede ser nulo

                    console.log(dataForModal)
                    // Aspectos para rellenar los datos
                    // Para el titulo
                    const tl_edit = document.getElementById('tl-edit').value = dataForModal.titleTask;

                    // Para las opciones
                    document.querySelectorAll('.option-s-edit').forEach(option => {
                        //Filtramos el valor, que puede contener " (YOU)"
                        if(option.textContent.split(" (You)")[0] === dataForModal.respUs){
                            option.selected = true;
                        }
                    });
                    // Para las instrucciones
                    const descripTask = document.getElementById('des-edit').textContent = dataForModal.instructionsTask;
                    // Para la fecha 
                    const date = document.getElementById('dat-edit').value = new Date(dataForModal.deadLineTask).toISOString().split('T')[0];

                    const F_cre = document.getElementById('I-in-D-E').textContent = 'Creation date: ' + new Date(dataForModal.dateCreation).toISOString().split('T')[0];
                    const F_fin = document.getElementById('F-in-D-E').textContent = 'Deadline: ' + new Date(dataForModal.dateCreation).toISOString().split('T')[0];

                    const checkboxes = document.querySelectorAll('.chkex-edit');
                    checkboxes.forEach(checkbox => {
                        // Obtenemos el valor de su elemento padre del chckbox -> (LABEL)
                        const usernameText = checkbox.parentElement.textContent.trim();

                        if(dataForModal.asigUs != null){
                            if(dataForModal.asigUs.split(',').filter(elemento => elemento.includes(usernameText))){
                                checkbox.checked = true;
                            }
                        }
                    });

                    const statu = document.getElementById('statu-E');
                    switch(dataForModal.stateOfTask){
                        case 1: 
                                statu.textContent = "Status: To do";
                                break;

                        case 2: 
                                statu.textContent = "Status: Doing";
                                break;

                        case 3:
                                statu.textContent = "Status: Done";
                                break;

                        case 6:
                                statu.textContent = "Status: Cancelled";
                                break;
                    }

                    const StatusDesc = document.getElementById('desDStatusE');

                    if(dataForModal.commentsTaskFinishOrCancell == null && dataForModal.userComnFinCan == null){
                        StatusDesc.textContent = "No comments, the task is going well.";
                    }else{
                        StatusDesc.textContent = dataForModal.commentsTaskFinishOrCancell + " \nWho wrote it? " + dataForModal.userComnFinCan;
                    }

                    const btn_del = document.getElementById('b-del').href = '/delete/' + dataForModal.taskID;

                    //- if(dataForModal.stateOfTask === 6){
                    //-     const statu = document.getElementById('statu-E').textContent = "Status: Canceled task";
                    //- }else{
                    //-     if()
                    //-     const statu = document.getElementById('statu-E').textContent = "Status: Finished work";
                    //- }
                    const fomr = document.getElementById('fom-modif').action = '/edit-task/' + dataForModal.taskID;
        }
    }

    function setDataForModalForUserAsigment(data){
        const modal = document.getElementById("Modal-res");
        modal.classList.add('show');
        modal.classList.remove('hide');
        modal.style.display = 'block';
        const dataForModal = data.dataForModal;
        const dataUsers = data.dataUsers;
        const dataOr = data.usersOrden; // Este puede ser nulo
        // Valor del propietario
        const own = document.getElementById('ownerR').textContent = "Owner: " + dataForModal.owner;
        // Valor del titulo
        const title = document.getElementById('tlR').value = dataForModal.titleTask;
        // Opciones
        const optionRes = document.getElementById('v-resp').textContent  = dataForModal.respUs;
        // descripcion
        const descripTask = document.getElementById('desR').textContent = dataForModal.instructionsTask;
        // fecha de entrega
        const date = document.getElementById('datR').value = new Date(dataForModal.deadLineTask).toISOString().split('T')[0];
        // Los usuarios responsables
        const container = document.querySelector('.contR');         
        // Verificamos que el objeto que queremos iterar tenga algo
        if(dataOr && Object.keys(dataOr).length > 0){
            // Recorremos el arreglo que viene ordenado por el server, y creamos los elementos
            Object.entries(dataOr).forEach(([key, usersArray]) => {
                // Creamos el subtitulo de cada letra del alfabeto
                const h2 = document.createElement('h2');
                h2.textContent = key;
                h2.className = 'subt-title';
                container.appendChild(h2);
                // Creamos la lista
                const ul = document.createElement('ul');
                ul.className = 'list';
                container.appendChild(ul);
                usersArray.forEach(user => {
                    // Creamos el elemento de la lista
                    const li = document.createElement('li');
                    li.className = 'element';
                    // Creamos la etiqueta
                    const label = document.createElement('label');
                    label.className = 'txt-label';
                    // Creamos el checkbox
                    const input = document.createElement('input');
                    input.type = 'checkbox';
                    input.name = 'user_respon';
                    input.className = 'chkex';
                    input.checked = true;
                    input.disabled = true;
                    // AÃ±adimos el checkbox a la etiqueta
                    label.appendChild(input);
                    // AÃ±adimos el nombre del usuario a la etiqueta
                    label.appendChild(document.createTextNode(user));
                    // AÃ±adir la etiqueta al elemento de la lista
                    li.appendChild(label);
                    // AÃ±adir el elemento de la lista a la lista
                    ul.appendChild(li);
                });
            });
        }else{
                const h3 = document.createElement('h3');
                h3.textContent = "No user has been assigned for this task, only the responsible one.";
                h3.className = 'subt-title-nop';
                container.appendChild(h3);
        }
        // Aspectos del formulario
        const fomr = document.getElementById('btn-cambio-acp').href = '/accep-task/' + dataForModal.taskID;
    } 

    function setDataForModalForUserAsigmentDoin(data){
        const modal = document.getElementById("Modal-doing");
        modal.classList.add('show');
        modal.classList.remove('hide');
        modal.style.display = 'block';

        const dataForModal = data.dataForModal;
        const dataUsers = data.dataUsers;
        const dataOr = data.usersOrden; // Este puede ser nulo

        // Valor del propietario
        const own = document.getElementById('ownerRDon').textContent = "Owner: " + dataForModal.owner;
        // Valor del titulo
        const title = document.getElementById('tlRDoing').value = dataForModal.titleTask;
        // Opciones
        const optionRes = document.getElementById('v-resp-doing').textContent  = dataForModal.respUs;
        // descripcion
        const descripTask = document.getElementById('des-doing').textContent = dataForModal.instructionsTask;
        // fecha de entrega
        const date = document.getElementById('dat-doing').value = new Date(dataForModal.deadLineTask).toISOString().split('T')[0];
        // Los usuarios responsables
        const container = document.querySelector('.cont-doing');        
         
        // Verificamos que el objeto que queremos iterar tenga algo
        if(dataOr && Object.keys(dataOr).length > 0){
            // Recorremos el arreglo que viene ordenado por el server, y creamos los elementos
            Object.entries(dataOr).forEach(([key, usersArray]) => {
                // Creamos el subtitulo de cada letra del alfabeto
                const h2 = document.createElement('h2');
                h2.textContent = key;
                h2.className = 'subt-title';
                container.appendChild(h2);
                // Creamos la lista
                const ul = document.createElement('ul');
                ul.className = 'list';
                container.appendChild(ul);
                usersArray.forEach(user => {
                    // Creamos el elemento de la lista
                    const li = document.createElement('li');
                    li.className = 'element';
                    // Creamos la etiqueta
                    const label = document.createElement('label');
                    label.className = 'txt-label';
                    // Creamos el checkbox
                    const input = document.createElement('input');
                    input.type = 'checkbox';
                    input.name = 'user_respon';
                    input.className = 'chkex';
                    input.checked = true;
                    input.disabled = true;
                    // AÃ±adimos el checkbox a la etiqueta
                    label.appendChild(input);
                    // AÃ±adimos el nombre del usuario a la etiqueta
                    label.appendChild(document.createTextNode(user));
                    // AÃ±adir la etiqueta al elemento de la lista
                    li.appendChild(label);
                    // AÃ±adir el elemento de la lista a la lista
                    ul.appendChild(li);
                });
            });
        }else{
                const h3 = document.createElement('h3');
                h3.textContent = "No user has been assigned for this task, only the responsible one.";
                h3.className = 'subt-title-nop';
                container.appendChild(h3);
        }
        // Aspectos del formulario
        const fomr = document.getElementById('fom-finshi').action = '/fin-task/' + dataForModal.taskID;

    } 

    function setDataForModalDone(data){
        const modal = document.getElementById("Modal-done");
        modal.classList.add('show');
        modal.classList.remove('hide');
        modal.style.display = 'block';
        const dataForModal = data.dataForModal;

        const dataUsers = data.dataUsers;
        const dataOr = data.usersOrden; // Este puede ser nulo
        // Valor del propietario
        const own = document.getElementById('ownerD').textContent = "Owner: " + dataForModal.owner;
        // Valor del titulo
        const title = document.getElementById('tlD').value = dataForModal.titleTask;
        // Opciones
        const optionRes = document.getElementById('v-respD').textContent  = dataForModal.respUs;
        // descripcion
        const descripTask = document.getElementById('desD').textContent = dataForModal.instructionsTask;
        // fecha de entrega
        const date = document.getElementById('datD').value = new Date(dataForModal.deadLineTask).toISOString().split('T')[0];

        const desDStatus = document.getElementById('desDStatus').textContent = dataForModal.commentsTaskFinishOrCancell + " \nWho wrote it? " + dataForModal.userComnFinCan;

        if(dataForModal.stateOfTask === 6){
            const statu = document.getElementById('statu').textContent = "Status: Canceled task";
        }else{
            const statu = document.getElementById('statu').textContent = "Status: Finished work";
        }

        const f_ini = document.getElementById('I-in-D').textContent = 'Creation date: ' + new Date(dataForModal.dateCreation).toISOString().split('T')[0];
        const f_dtlin = document.getElementById('F-in-D').textContent = 'Deadline: ' + new Date(dataForModal.deadLineTask).toISOString().split('T')[0];

        // Los usuarios responsables
        const container = document.querySelector('.contD');        

        // Verificamos que el objeto que queremos iterar tenga algo
        if(dataOr && Object.keys(dataOr).length > 0){
            // Recorremos el arreglo que viene ordenado por el server, y creamos los elementos
            Object.entries(dataOr).forEach(([key, usersArray]) => {
                // Creamos el subtitulo de cada letra del alfabeto
                const h2 = document.createElement('h2');
                h2.textContent = key;
                h2.className = 'subt-title';
                container.appendChild(h2);
                // Creamos la lista
                const ul = document.createElement('ul');
                ul.className = 'list';
                container.appendChild(ul);
                usersArray.forEach(user => {
                    // Creamos el elemento de la lista
                    const li = document.createElement('li');
                    li.className = 'element';
                    // Creamos la etiqueta
                    const label = document.createElement('label');
                    label.className = 'txt-label';
                    // Creamos el checkbox
                    const input = document.createElement('input');
                    input.type = 'checkbox';
                    input.name = 'user_respon';
                    input.className = 'chkex';
                    input.checked = true;
                    input.disabled = true;
                    // AÃ±adimos el checkbox a la etiqueta
                    label.appendChild(input);
                    // AÃ±adimos el nombre del usuario a la etiqueta
                    label.appendChild(document.createTextNode(user));
                    // AÃ±adir la etiqueta al elemento de la lista
                    li.appendChild(label);
                    // AÃ±adir el elemento de la lista a la lista
                    ul.appendChild(li);
                });
            }); 
        }else{
                const h3 = document.createElement('h3');
                h3.textContent = "No user has been assigned for this task, only the responsible one.";
                h3.className = 'subt-title-nop';
                container.appendChild(h3);
        }
    } 